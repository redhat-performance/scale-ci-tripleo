#!/bin/bash

set -eux

### --start_docs
## Prepare images for deploying the overcloud
## ==========================================

## Prepare Your Environment
## ------------------------

## * Source in the undercloud credentials.
## ::

source /home/stack/stackrc

{% if introspection|bool %}

## * Introspect hardware attributes of nodes.
## ::

openstack baremetal introspection bulk start

{% endif %}

{% if introspect_with_retry|bool %}

## * Introspect all manageable nodes with a caller provided timeout.
##   then move all nodes that power off after a successful introspection
##   back to available so we don't introspect them again. This is useful
##   for large deployments (think 10+ nodes) where bulk introspection
##   can be troublesome. It's also useful in environments where connection
##   problems may spuriously fail a deployment. Related-Bug: #1651127
## ::
introspect()
{
    clean 15m

    for node in `ironic --json node-list | jq -r '.[]| select(.["provision_state"] == "manageable")| .["uuid"]'`; do
        openstack baremetal introspection start $node
        sleep 10s
    done

    manageable_count=$(ironic --json node-list | jq -r '.[]| select(.["provision_state"] == "manageable")| .["uuid"]' | wc -l)
    on_count=$(ironic --json node-list|jq -r '.[]| select(.["power_state"] == "power on")| .["uuid"]' | wc -l)
    while [ $on_count -eq 0 ] && [ $manageable_count -gt 0 ]; do
        manageable_count=$(ironic --json node-list | jq -r '.[]| select(.["provision_state"] == "manageable")| .["uuid"]' | wc -l)
        on_count=$(ironic --json node-list|jq -r '.[]| select(.[\"power_state\"] == \"power on\")| .[\"uuid\"]' | wc -l)
        sleep 30
    done

    set +e
    timeout $1 bash -c -- 'source $HOME/stackrc; \
                            on_count=$(ironic --json node-list|jq -r ".[]| select(.[\"power_state\"] == \"power on\")| .[\"uuid\"]" | wc -l) ; \
                            while [ $on_count -gt 0 ]; do \
                                sleep 30s; \
                                on_count=$(ironic --json node-list|jq -r ".[]| select(.[\"power_state\"] == \"power on\")| .[\"uuid\"]" | wc -l) ; \
                            done'
    set -e

    for node in `ironic --json node-list | jq -r '.[]| select(.["power_state"] == "power off")| select(.["provision_state"] == "manageable")|.["uuid"]'`; do
        ironic node-set-provision-state $node provide
    done
}


# Corrects hardware cleaning failures
clean()
{

    for node in `ironic --json node-list | jq -r '.[]| select(.["power_state"] == "power off")| select(.["provision_state"] == "manageable")|.["uuid"]'`; do
        ironic node-set-provision-state $node clean --clean-steps '[{"interface": "deploy", "step": "erase_devices_metadata"}]'
        sleep 10
    done

    set +e
    timeout $1 bash -c -- 'source $HOME/stackrc; \
                            on_count=$(ironic --json node-list|jq -r ".[]| select(.[\"provision_state\"] == \"clean wait\")| .[\"uuid\"]" | wc -l) ; \
                            while [ $on_count -gt 0 ]; do \
                                sleep 30s; \
                                on_count=$(ironic --json node-list|jq -r ".[]| select(.[\"provision_state\"] == \"clean wait\")| .[\"uuid\"]" | wc -l) ; \
                            done'
    set -e

    # Getting nodes out of clean-wait is a real pain. Check if a longer timeout is justified on your hardware
    # but generally 15m is excessive.
    for node in `ironic --json node-list | jq -r '.[]| select(.["provision_state"] == "clean failed")|.["uuid"]'`; do
        ironic node-set-provision-state $node manage
        sleep 10
        ironic node-set-provision-state $node clean --clean-steps '[{"interface": "deploy", "step": "erase_devices_metadata"}]'
    done
    for node in `ironic --json node-list | jq -r '.[]| select(.["provision_state"] == "clean wait")|.["uuid"]'`; do
        ironic node-set-maintenance $node true
        ironic node-set-provision-state $node abort
        ironic node-set-maintenance $node false
        ironic node-set-provision-state $node manage
        sleep 10
        ironic node-set-provision-state $node clean --clean-steps '[{"interface": "deploy", "step": "erase_devices_metadata"}]'
    done
    # make sure nodes go from clean -> clean_wait
    sleep 60
    set +e
    timeout $1 bash -c -- 'source $HOME/stackrc; \
                            on_count=$(ironic --json node-list|jq -r ".[]| select(.[\"provision_state\"] == \"clean wait\")| .[\"uuid\"]" | wc -l) ; \
                            while [ $on_count -gt 0 ]; do \
                                sleep 30s; \
                                on_count=$(ironic --json node-list|jq -r ".[]| select(.[\"provision_state\"] == \"clean wait\")| .[\"uuid\"]" | wc -l) ; \
                            done'
    set -e

    for node in `ironic --json node-list | jq -r '.[]| select(.["provision_state"] == "clean failed")|.["uuid"]'`; do
        ironic node-set-provision-state $node manage
        sleep 10
    done
    for node in `ironic --json node-list | jq -r '.[]| select(.["provision_state"] == "clean wait")|.["uuid"]'`; do
        ironic node-set-maintenance $node true
        ironic node-set-provision-state $node abort
        ironic node-set-maintenance $node false
        ironic node-set-provision-state $node manage
        sleep 10
    done
}



## * Introspect hardware attributes of nodes in a robust manner
##   retrying up to three times on any given node. This should
##   only be used in cases where deployment using bulk introspection
##   has reliability issues.
## ::

for node in `ironic --json node-list | jq -r '.[]| select(.["provision_state"] == "available")| .["uuid"]'`; do
  ironic node-set-provision-state $node manage
done

introspect 15m
introspect 15m
introspect 15m

{% endif %}

### --stop_docs
